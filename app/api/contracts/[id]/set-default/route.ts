import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await context.params
    const contractId = id

    // V√©rifier que le contrat existe
    const contract = await prisma.contract.findUnique({
      where: { id: contractId }
    })

    if (!contract) {
      return NextResponse.json(
        { success: false, error: 'Contrat non trouv√©' },
        { status: 404 }
      )
    }

    console.log('‚≠ê [API] D√©finition comme d√©faut:', contractId)

    // 1. D√©sactiver tous les templates par d√©faut existants
    await prisma.contractTemplate.updateMany({
      where: { isDefault: true },
      data: { isDefault: false }
    })
    console.log('üìÑ [API] Anciens templates par d√©faut d√©sactiv√©s')

    // 2. Cr√©er un nouveau template bas√© sur ce contrat
    const contractWithData = await prisma.contract.findUnique({
      where: { id: contractId },
      include: {
        booking: {
          include: {
            user: true,
            room: true
          }
        }
      }
    })

    if (!contractWithData) {
      throw new Error('Contrat non trouv√© pour cr√©er le template')
    }

    // 3. Cr√©er le template par d√©faut
    await prisma.contractTemplate.create({
      data: {
        name: `Template bas√© sur ${contractWithData.contractNumber}`,
        description: `Template cr√©√© automatiquement depuis le contrat ${contractWithData.contractNumber}`,
        pdfData: contractWithData.pdfUrl || '',
        isDefault: true,
        createdById: contractWithData.booking.user.id
      }
    })
    console.log('‚úÖ [API] Nouveau template par d√©faut cr√©√©')

    return NextResponse.json({
      success: true,
      message: 'Contrat d√©fini comme mod√®le par d√©faut'
    })

  } catch (error) {
    console.error('Erreur d√©finition d√©faut:', error)
    return NextResponse.json(
      { success: false, error: 'Erreur lors de la d√©finition comme d√©faut' },
      { status: 500 }
    )
  } finally {
    await prisma.$disconnect()
  }
}