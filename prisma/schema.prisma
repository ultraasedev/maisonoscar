// Fichier : prisma/schema.prisma
// Description : Schéma complet pour Maison Oscar Co-living
// Base de données : MongoDB Atlas Cloud

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// === GESTION DES UTILISATEURS === //

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  phone     String?
  firstName String
  lastName  String
  birthDate DateTime?
  
  // Statut utilisateur
  role      UserRole @default(RESIDENT)
  status    UserStatus @default(ACTIVE)
  
  // Informations complémentaires
  profession   String?
  school       String?
  emergencyContact String?
  emergencyPhone   String?
  
  // Profil
  bio          String?
  profileImage String?
  
  // Relations
  bookings     Booking[]
  payments     Payment[]
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  RESIDENT
  PROSPECT
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

// === GESTION DES CHAMBRES === //

model Room {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // "Chambre Arche 1", "Chambre Jardin 2"
  number      Int      @unique // 1, 2, 3...
  
  // Informations principales
  price       Float    // Prix mensuel en euros
  surface     Float    // Surface en m²
  description String
  
  // Statut et disponibilité
  status      RoomStatus @default(AVAILABLE)
  isActive    Boolean    @default(true)
  
  // Équipements et caractéristiques
  hasPrivateBathroom Boolean @default(false)
  hasBalcony         Boolean @default(false)
  hasDesk            Boolean @default(true)
  hasCloset          Boolean @default(true)
  hasWindow          Boolean @default(true)
  floor              Int     @default(0) // 0=RDC, 1=Étage
  orientation        String? // "Sud", "Nord", "Est-Ouest"
  
  // Médias
  images      String[] // URLs des photos
  virtualTour String?  // URL visite 3D
  isVirtualTourActive Boolean @default(false)
  
  // Relations
  bookings    Booking[]
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("rooms")
}

enum RoomStatus {
  AVAILABLE     // Disponible
  OCCUPIED      // Occupée
  MAINTENANCE   // En maintenance
  UNAVAILABLE   // Indisponible (admin)
}

// === GESTION DES RÉSERVATIONS === //

model Booking {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id])
  roomId   String @db.ObjectId
  room     Room   @relation(fields: [roomId], references: [id])
  
  // Période de réservation
  startDate DateTime
  endDate   DateTime?  // null = durée indéterminée
  
  // Statut de la réservation
  status    BookingStatus @default(PENDING)
  
  // Informations financières
  monthlyRent    Float
  securityDeposit Float @default(0)
  totalAmount    Float
  
  // Documents et validations
  contractSigned Boolean @default(false)
  inventorySigned Boolean @default(false)
  keysGiven       Boolean @default(false)
  
  // Notes admin
  notes String?
  
  // Relations paiements
  payments Payment[]
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("bookings")
}

enum BookingStatus {
  PENDING     // En attente
  CONFIRMED   // Confirmée
  ACTIVE      // En cours (résident installé)
  ENDED       // Terminée
  CANCELLED   // Annulée
}

// === GESTION DES PAIEMENTS === //

model Payment {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Relations
  userId    String  @db.ObjectId
  user      User    @relation(fields: [userId], references: [id])
  bookingId String  @db.ObjectId
  booking   Booking @relation(fields: [bookingId], references: [id])
  
  // Informations paiement
  amount      Float
  dueDate     DateTime
  paidDate    DateTime?
  paymentType PaymentType
  
  // Statut
  status      PaymentStatus @default(PENDING)
  isLate      Boolean       @default(false)
  lateDays    Int           @default(0)
  
  // Relances
  reminderSent Boolean   @default(false)
  reminderDate DateTime?
  
  // Notes
  notes String?
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("payments")
}

enum PaymentType {
  RENT            // Loyer mensuel
  SECURITY_DEPOSIT // Caution
  CHARGES         // Charges
  LATE_FEE        // Frais de retard
}

enum PaymentStatus {
  PENDING   // En attente
  PAID      // Payé
  LATE      // En retard
  CANCELLED // Annulé
}

// === GESTION DES CONTACTS === //

model Contact {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Informations contact
  firstName String
  lastName  String
  email     String
  phone     String?
  
  // Message
  subject   String
  message   String
  
  // Type de demande
  type      ContactType @default(GENERAL)
  
  // Statut traitement
  status    ContactStatus @default(NEW)
  
  // Réponse admin
  adminResponse String?
  respondedAt   DateTime?
  respondedBy   String?  // Email admin
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("contacts")
}

enum ContactType {
  GENERAL       // Demande générale
  BOOKING       // Demande de réservation
  VISIT         // Demande de visite
  COMPLAINT     // Réclamation
  MAINTENANCE   // Maintenance
  INFORMATION   // Information
}

enum ContactStatus {
  NEW       // Nouveau
  PENDING   // En cours de traitement
  RESPONDED // Répondu
  CLOSED    // Fermé
}

// === CONFIGURATION DU SITE === //

model SiteConfig {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  key   String @unique // Clé unique pour chaque config
  value String // Valeur JSON ou texte
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("site_config")
}

// === GESTION DE LA MAISON === //

model House {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Informations principales
  name        String @default("Maison Oscar")
  description String
  
  // Localisation
  address     String
  city        String @default("Bruz")
  zipCode     String @default("35170")
  country     String @default("France")
  
  // Caractéristiques
  totalSurface    Float   // Surface totale en m²
  totalRooms      Int     // Nombre total de chambres
  commonAreas     String[] // ["Salon", "Cuisine", "Jardin"]
  
  // Commodités
  hasGarden       Boolean @default(false)
  gardenSurface   Float?  // Surface jardin en m²
  hasParking      Boolean @default(false)
  parkingSpaces   Int     @default(0)
  
  // Transport
  metroDistance   String? // "15 min de Rennes"
  busLines        String[] // Lignes de bus
  
  // Médias
  images          String[] // URLs des photos
  virtualTour     String?  // URL visite 3D
  floorPlan       String?  // Plan de la maison
  
  // Statut
  isActive        Boolean @default(true)
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("houses")
}

// === INFORMATIONS DE CONTACT === //

model ContactInfo {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  
  // Contact principal
  email      String
  phone      String
  whatsapp   String?
  
  // Horaires
  openingHours String // JSON des horaires
  
  // Adresse
  address    String
  city       String
  zipCode    String
  
  // Réseaux sociaux
  instagram  String?
  facebook   String?
  linkedin   String?
  
  // Informations légales
  siret      String?
  companyName String?
  
  // Statut
  isActive   Boolean @default(true)
  
  // Métadonnées
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("contact_info")
}