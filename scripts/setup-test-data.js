const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function setupTestData() {
  try {
    console.log('üîß Configuration des donn√©es de test...')

    // 1. R√©cup√©rer un utilisateur admin
    const adminUser = await prisma.user.findFirst()
    if (!adminUser) {
      console.log('‚ùå Aucun utilisateur trouv√©')
      return
    }

    // 2. Cr√©er un template par d√©faut
    console.log('üìÑ Cr√©ation du template par d√©faut...')
    const defaultTemplate = await prisma.contractTemplate.create({
      data: {
        name: 'Contrat Standard Maison Oscar',
        description: 'Template par d√©faut pour tous les contrats',
        isDefault: true,
        createdBy: { connect: { id: adminUser.id } },
        pdfData: `CONTRAT DE LOCATION EN COLOCATION
=====================================

Entre les soussign√©s :

**LE BAILLEUR**
{{OWNER_NAME}}
Adresse : {{OWNER_ADDRESS}}
Email : {{OWNER_EMAIL}}
T√©l√©phone : {{OWNER_PHONE}}

ET

**LE LOCATAIRE**
{{TENANT_FIRSTNAME}} {{TENANT_LASTNAME}}
Email : {{TENANT_EMAIL}}
T√©l√©phone : {{TENANT_PHONE}}

IL A √âT√â CONVENU CE QUI SUIT :

## Article 1 : OBJET DU CONTRAT
Le bailleur loue au locataire la chambre suivante :
- D√©signation : {{ROOM_NAME}} (Chambre n¬∞{{ROOM_NUMBER}})
- Surface : {{ROOM_SURFACE}} m¬≤
- √âtage : {{ROOM_FLOOR}}
- Adresse : {{HOUSE_ADDRESS}}

## Article 2 : DUR√âE DU BAIL
Le pr√©sent bail est consenti pour une dur√©e de {{CONTRACT_DURATION}} mois.
Date de d√©but : {{START_DATE}}
Date de fin : {{END_DATE}}

## Article 3 : LOYER ET CHARGES
Loyer mensuel : {{MONTHLY_RENT}}‚Ç¨ charges comprises
D√©tail :
- Loyer hors charges : {{BASE_RENT}}‚Ç¨
- Charges : {{CHARGES}}‚Ç¨ (eau, √©lectricit√©, chauffage, internet)

Le loyer est payable mensuellement, d'avance, le {{PAYMENT_DAY}} de chaque mois.

## Article 4 : D√âP√îT DE GARANTIE
Un d√©p√¥t de garantie de {{SECURITY_DEPOSIT}}‚Ç¨ est vers√© √† la signature du pr√©sent contrat.

## Article 5 : R√âSILIATION
Le pr√©avis de r√©siliation est de **1 mois** pour le Locataire et **3 mois** pour le Bailleur.

Fait √† {{CITY}}, le {{CONTRACT_DATE}}
En deux exemplaires originaux

**Le Bailleur**                    **Le Locataire**

[SIGNATURE:ADMIN_SIGNATURE]                [SIGNATURE:TENANT_SIGNATURE]`,
      }
    })

    // 3. R√©cup√©rer une chambre existante
    const room = await prisma.room.findFirst()

    if (!adminUser || !room) {
      console.log('‚ùå Pas d\'utilisateur ou de chambre disponible')
      return
    }

    // 4. Cr√©er une r√©servation
    console.log('üìã Cr√©ation d\'une r√©servation...')
    const booking = await prisma.booking.create({
      data: {
        userId: adminUser.id,
        roomId: room.id,
        startDate: new Date(),
        status: 'CONFIRMED',
        monthlyRent: room.price,
        securityDeposit: room.price,
        totalAmount: room.price * 2
      }
    })

    // 4. Cr√©er un contrat
    console.log('üìÑ Cr√©ation d\'un contrat...')
    const contract = await prisma.contract.create({
      data: {
        contractNumber: 'MO-2024-001',
        bookingId: booking.id,
        startDate: new Date(),
        endDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // +1 an
        monthlyRent: room.price,
        deposit: room.price,
        charges: 50,
        status: 'DRAFT',
        pdfUrl: 'data:application/pdf;base64,exemple-pdf-data'
      }
    })

    console.log('‚úÖ Donn√©es de test cr√©√©es avec succ√®s!')
    console.log(`üìÑ Template: ${defaultTemplate.name} (d√©faut: ${defaultTemplate.isDefault})`)
    console.log(`üìã Contrat: ${contract.contractNumber}`)
    console.log(`üë§ Locataire: ${adminUser.firstName} ${adminUser.lastName}`)
    console.log(`üè† Chambre: ${room.name}`)
    console.log('')
    console.log('üåê Acc√©dez √† http://localhost:3001/admin/contracts pour voir les contrats')

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

setupTestData()